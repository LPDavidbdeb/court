# Generated by Django 5.2.4 on 2025-08-22 12:48

from django.db import migrations, models
import django.db.models.deletion
import uuid


def migrate_data_forward(apps, schema_editor):
    """
    Copies data from the old SavedEmail model to the new Email and EmailThread models.
    """
    # Get historical models to use in the migration
    SavedEmail = apps.get_model('email_manager', 'SavedEmail')
    EmailThread = apps.get_model('email_manager', 'EmailThread')
    Email = apps.get_model('email_manager', 'Email')

    # A dictionary to keep track of created threads to avoid duplicates
    created_threads = {}

    for saved_email in SavedEmail.objects.all():
        thread_id = saved_email.thread_id
        target_thread = None

        # Case 1: Email has a thread_id (e.g., from Gmail)
        if thread_id:
            # Check if we've already created a thread for this ID
            if thread_id in created_threads:
                target_thread = created_threads[thread_id]
            else:
                # Create a new EmailThread
                target_thread = EmailThread.objects.create(
                    thread_id=thread_id,
                    protagonist=saved_email.protagonist,
                    subject=saved_email.subject,
                )
                created_threads[thread_id] = target_thread

        # Case 2: Email does not have a thread_id (e.g., uploaded EML)
        else:
            # Create a new, unique thread for this single email.
            # Use its own message_id to guarantee uniqueness for the thread_id.
            new_thread_id = f"eml-thread-{saved_email.message_id or uuid.uuid4()}"
            target_thread = EmailThread.objects.create(
                thread_id=new_thread_id,
                protagonist=saved_email.protagonist,
                subject=saved_email.subject,
            )

        # Now, create the new Email object linked to the target thread
        Email.objects.create(
            thread=target_thread,
            message_id=saved_email.message_id,
            dao_source=saved_email.dao_source,
            subject=saved_email.subject,
            sender=saved_email.sender,
            recipients_to=saved_email.recipients_to,
            recipients_cc=saved_email.recipients_cc,
            recipients_bcc=saved_email.recipients_bcc,
            date_sent=saved_email.date_sent,
            body_plain_text=saved_email.body_plain_text,
            eml_file_path=saved_email.eml_file_path,
            saved_at=saved_email.saved_at,
        )


def migrate_data_backward(apps, schema_editor):
    """
    Reverts the data migration for safety.
    """
    SavedEmail = apps.get_model('email_manager', 'SavedEmail')
    Email = apps.get_model('email_manager', 'Email')

    for email in Email.objects.all():
        SavedEmail.objects.create(
            message_id=email.message_id,
            thread_id=email.thread.thread_id,
            protagonist=email.thread.protagonist,
            dao_source=email.dao_source,
            subject=email.subject,
            sender=email.sender,
            recipients_to=email.recipients_to,
            recipients_cc=email.recipients_cc,
            recipients_bcc=email.recipients_bcc,
            date_sent=email.date_sent,
            body_plain_text=email.body_plain_text,
            eml_file_path=email.eml_file_path,
            saved_at=email.saved_at,
        )


class Migration(migrations.Migration):
    dependencies = [
        ('email_manager', '0003_savedemail_dao_source'),
        ('protagonist_manager', '0002_remove_protagonist_email_protagonistemail'),
    ]

    operations = [
        # Create the new table structures
        migrations.CreateModel(
            name='EmailThread',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('thread_id',
                 models.CharField(db_index=True, help_text='The unique ID for the email thread (e.g., from Gmail).',
                                  max_length=255, unique=True)),
                ('subject', models.CharField(blank=True,
                                             help_text='The subject of the conversation, typically from the first email.',
                                             max_length=500, null=True)),
                ('saved_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('protagonist',
                 models.ForeignKey(blank=True, help_text='The protagonist associated with this email thread.',
                                   null=True, on_delete=django.db.models.deletion.SET_NULL,
                                   related_name='email_threads', to='protagonist_manager.protagonist')),
            ],
            options={
                'verbose_name': 'Email Thread',
                'verbose_name_plural': 'Email Threads',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_id', models.CharField(db_index=True, max_length=255, unique=True)),
                ('dao_source',
                 models.CharField(blank=True, help_text='The source used to acquire this email (e.g., Gmail).',
                                  max_length=50, null=True)),
                ('subject', models.CharField(blank=True, max_length=500, null=True)),
                ('sender', models.CharField(blank=True, max_length=255, null=True)),
                ('recipients_to', models.TextField(blank=True, help_text="Comma-separated 'To' recipients", null=True)),
                ('recipients_cc', models.TextField(blank=True, help_text="Comma-separated 'Cc' recipients", null=True)),
                ('recipients_bcc',
                 models.TextField(blank=True, help_text="Comma-separated 'Bcc' recipients", null=True)),
                ('date_sent', models.DateTimeField(blank=True, null=True)),
                ('body_plain_text', models.TextField(blank=True, null=True)),
                ('eml_file_path', models.CharField(blank=True, max_length=1024, null=True)),
                ('saved_at', models.DateTimeField(auto_now_add=True)),
                ('thread', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emails',
                                             to='email_manager.emailthread')),
            ],
            options={
                'verbose_name': 'Email',
                'verbose_name_plural': 'Emails',
                'ordering': ['date_sent'],
            },
        ),

        # Run the data migration script to move data from old model to new models
        migrations.RunPython(migrate_data_forward, migrate_data_backward),

        # Finally, delete the old model's table
        migrations.DeleteModel(
            name='SavedEmail',
        ),
    ]