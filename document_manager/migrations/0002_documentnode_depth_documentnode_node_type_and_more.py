# Generated by Django 5.2.4 on 2025-07-23 14:18

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('document_manager', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='documentnode',
            name='depth',
            field=models.IntegerField(db_index=True, default=0, help_text="Profondeur du nœud dans l'arbre (0 pour la bibliothèque, 1 pour les documents, etc.)."),
        ),
        migrations.AddField(
            model_name='documentnode',
            name='node_type',
            field=models.CharField(choices=[('library', 'Bibliothèque'), ('document', 'Document Principal'), ('section', 'Section'), ('paragraph', 'Paragraphe / Contenu'), ('root', 'Nœud Racine Générique')], default='paragraph', help_text='Le type de ce nœud (ex: bibliothèque, document, section).', max_length=20),
        ),
        migrations.AlterField(
            model_name='documentnode',
            name='item',
            field=models.CharField(help_text="Nom court ou titre du nœud (ex: 'requete', 'chapitre').", max_length=255),
        ),
        migrations.AlterField(
            model_name='documentnode',
            name='lft',
            field=models.IntegerField(db_index=True, help_text="Valeur 'gauche' pour le parcours ensembliste imbriqué (nested set)."),
        ),
        migrations.AlterField(
            model_name='documentnode',
            name='parent',
            field=models.ForeignKey(blank=True, help_text='Le nœud parent de ce document. Laissez vide pour un nœud racine (Bibliothèque).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='document_manager.documentnode'),
        ),
        migrations.AlterField(
            model_name='documentnode',
            name='rgt',
            field=models.IntegerField(db_index=True, help_text="Valeur 'droite' pour le parcours ensembliste imbriqué (nested set)."),
        ),
        migrations.AlterUniqueTogether(
            name='documentnode',
            unique_together={('parent', 'item')},
        ),
    ]
